{"componentChunkName":"component---src-templates-blog-post-js","path":"/api/pactumjs-cz2/","result":{"data":{"site":{"siteMetadata":{"title":"Kontrolqa","author":"kostyrko","siteUrl":"https://kostyrko.github.io/kontrolqa","comment":{"disqusShortName":"","utterances":"kostyrko/kontrolqa"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"2c62dbc4-c354-589c-aa6e-526d6aa97d45","excerpt":"Wprowadzenie Celem poniższego tekstu będzie dalsze przedstawienie możliwości testowania API przy pomocy pactumJS, tym razem bazując na konkretnych przykładach. dzisiejszy wpis powstał w ramach zasady opisywanej przeze mnie w innym miejscu (patrz: ‘Dobre zasady testowania’) -> AAA…","html":"<h2 id=\"wprowadzenie\" style=\"position:relative;\"><a href=\"#wprowadzenie\" aria-label=\"wprowadzenie permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wprowadzenie</h2>\n<p>Celem poniższego tekstu będzie dalsze przedstawienie możliwości testowania API przy pomocy pactumJS, tym razem bazując na konkretnych przykładach.</p>\n<p>dzisiejszy wpis powstał w ramach zasady opisywanej przeze mnie w innym miejscu (patrz: ‘Dobre zasady testowania’) -> AAA (Arrange, Act, Assert) Organizowanie/Przeprowadzenie/Sprawdzenie.</p>\n<p>W ramach pierwszej części zaproponuję znalezienie odpowiedniego API do testowania - korzystając z zasobów opublikowanych na <a href=\"https://rapidapi.com/\">rapidAPI</a> - przy pomocy tego portalu możemy wyszukać (oraz wykupić dostęp jeśli istnieje taka potrzeba) interesujące nas API przy pomocy, którego możemy stworzyć własną stronę/porta/apkę etc. Plus tego portalu jest taki, że w jednym miejscu grupuje wiele różnych api i w czytelny i zunifikowany sposób przedstawia wgląd w ich dokumentację.</p>\n<p>Dużo proponowanych dostępów do API jest freemium, tzn mają ograniczenia w ilości requestów, które można wykonać w sposób darmowy. Na potrzeby moich ćwiczeń wykorzystam api portalu <a href=\"https://imgur.com/\">imgur.com/</a> - w darmowej opcji pozwala na 100k requestów miesięcznie + posiada requesty typu GET/PUT/POST/DELETE - ze względu na to, że aby skorzystać nawet z darmowej opcji należy podać dane karty postanowiłem ostatecznie wykorzystać informacje znajdujące się na stronie <a href=\"https://apidocs.imgur.com/\">apidocs.imgur.com</a> tzn u samego źródła, gdzie API jest dobrze udokumentowane (przygotowana jest nawet kolekcja w Postmanie).</p>\n<h2 id=\"1-autoryzacja\" style=\"position:relative;\"><a href=\"#1-autoryzacja\" aria-label=\"1 autoryzacja permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Autoryzacja</h2>\n<p>Po utworzeniu konta na imgur należy zerejestrować aplikacjię odwiedzając stronę <a href=\"https://api.imgur.com/oauth2/addclient\">api.imgur.com/oauth2/addclient</a> i wypełnić formularz (na początek wybrałem opcję “OAuth 2 authorization without a callback URL”). Należy zapisać Client ID oraz Client Secret (ja takie rzeczy przechowuje w Bitwarenie w ramach aplikacji w pliku .env).\nWgląd w opcje “zarejestrowanej aplikacji” mamy dostęp pod tym linkiem <a href=\"https://imgur.com/account/settings/apps\">imgur.com/account/settings/apps</a></p>\n<p><a href=\"https://apidocs.imgur.com/#authorization-and-oauth\">apidocs.imgur.com/#authorization-and-oauth</a></p>\n<h3 id=\"access-token-i-postman\" style=\"position:relative;\"><a href=\"#access-token-i-postman\" aria-label=\"access token i postman permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Access token i Postman</h3>\n<p>Imgur bazuje na autoryzacji typu OAuth2 - niestety w tym momencie w sieci brak patentów poradzenie sobie z tego typu autoryzacją z poziomu pactumJS. W przyszłości być może zastosowanie osobnej biblioteki do tego być może okazać się pomocne -> np. <a href=\"https://www.npmjs.com/package/simple-oauth2\">simple-oauth2</a>  🧐 🤔 - sprawa do przemyślenia i zbadania. / Na szybko znalazłem taki przykład testu w sieci <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/simple-oauth2/simple-oauth2-tests.ts\">github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/simple-oauth2/simple-oauth2-tests.ts</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">     +----------+\n     | Resource |\n     |   Owner  |\n     |          |\n     +----------+\n          ^\n          |\n         (B)\n     +----|-----+          Client Identifier      +---------------+\n     |         -+----(A)-- &amp; Redirection URI ---->|               |\n     |  User-   |                                 | Authorization |\n     |  Agent  -+----(B)-- User authenticates --->|     Server    |\n     |          |                                 |               |\n     |         -+----(C)-- Authorization Code ---&lt;|               |\n     +-|----|---+                                 +---------------+\n       |    |                                         ^      v\n      (A)  (C)                                        |      |\n       |    |                                         |      |\n       ^    v                                         |      |\n     +---------+                                      |      |\n     |         |>---(D)-- Authorization Code ---------'      |\n     |  Client |          &amp; Redirection URI                  |\n     |         |                                             |\n     |         |&lt;---(E)----- Access Token -------------------'\n     +---------+       (w/ Optional Refresh Token)\n\n   Note: The lines illustrating steps (A), (B), and (C) are broken into\n   two parts as they pass through the user-agent.\n\n                     Figure 3: Authorization Code Flow</code></pre></div>\n<p>(źródło grafiki: <a href=\"https://datatracker.ietf.org/doc/html/rfc6749\">The OAuth 2.0 Authorization Framework</a>)</p>\n<p>W przypadku autoryzacji typu OAuth sprawa wydaje się być prostsza i przykłady jej zastosowania w sieci są obecne i możliwe do znalezienia np. <a href=\"https://www.zeljkovic.sh/rest-api-test-automation-with-pactumjs/\">www.zeljkovic.sh - REST API test automation with PactumJS</a>, - być może serwis flickr’a dostarcza odpowiednie API do przetestowania tego procesu <a href=\"https://www.flickr.com/services/api/auth.oauth.html#request_token\">https://www.flickr.com/services/api/auth.oauth.html</a></p>\n<p>W obecnym przypadku wykorzystamy Postmana oraz opisane kroki na str <a href=\"https://apidocs.imgur.com/#authorization-and-oauth\">apidocs.imgur.com/#authorization-and-oauth</a> w celu uzyskania tokenu, a następnie posłużymy się nim do stworzenia testów. (Być może skorzystanie z tego api za pośrednictwem serwisu rapidApi spowodowało by że ten problem by zniknął)</p>\n<hr>\n<p>AAA (Arrange, Act, Assert) Organizowanie/Przeprowadzenie/Sprawdzenie - po raz kolejny, tym razem w przypadku stworzenia testów API 😉</p>\n<p>Organizowanie - wysłanie zapytania, przygotowanie headerów, body itp. dążącego do wywołania konkretnego stanu (przeprowadzenie) oraz przy pomocy asercji sprawdzenie czy otrzymane dane są przedstawiają oczekiwany stan.</p>\n<p><code class=\"language-text\">inspect()</code> łączy się z get w celu wyświetlenia danych w konsoli</p>\n<hr>\n<p>Źródła:</p>\n<p><a href=\"https://github.com/pactumjs/pactum/discussions/81\">Save request and response json details in variables</a></p>\n<p><a href=\"https://github.com/pactumjs/pactum/issues/79\">Auth0 authentication</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=NRU_KdUSjD4\">Testing OAuth2 Authorization Flow with Postman (Authorization Code Grant)</a></p>\n<p><a href=\"https://devqa.io/rest-assured-oauth2-workflow-examples/\">Using REST-assured to Test OAuth 2.0 flow Examples</a></p>","frontmatter":{"title":"🤝 PactumJS - 2. podejście do testowania API przy pomocy JS","date":" 20/03/2022","tags":["pactumJS","js","api testing"]}}},"pageContext":{"slug":"/api/pactumjs-cz2/","previous":{"fields":{"slug":"/js/jsdoc/"},"frontmatter":{"title":"📃 JSDoc"}},"next":null}}}