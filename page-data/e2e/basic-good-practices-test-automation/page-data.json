{"componentChunkName":"component---src-templates-blog-post-js","path":"/e2e/basic-good-practices-test-automation/","result":{"data":{"site":{"siteMetadata":{"title":"Controlqa üëæ","author":"kostyrko","siteUrl":"https://kostyrko.github.io/kontrolqa","comment":{"disqusShortName":"","utterances":"kostyrko/kontrolqa"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"9e7f6d01-eaf4-5cc9-a4b7-49b19738670c","excerpt":"Recently (2021-06-25), a remote conference called Front-End Test Fest 2021 was held, conducted by Applitools and Cypress. One of the presentations focused on good practices for writing tests (link in the sources), and today‚Äôs post is an excerpt from that presentation. Main‚Ä¶","html":"<p><img src=\"https://static-cms.hotjar.com/documents/conducting-usability-test_yon4BQT.svg\"></p>\n<p>Recently (2021-06-25), a remote conference called Front-End Test Fest 2021 was held, conducted by Applitools and Cypress. One of the presentations focused on good practices for writing tests (link in the sources), and today‚Äôs post is an excerpt from that presentation.</p>\n<h3 id=\"main-principle-tests-should-be-simple---flat-test-design\" style=\"position:relative;\"><a href=\"#main-principle-tests-should-be-simple---flat-test-design\" aria-label=\"main principle tests should be simple   flat test design permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Main principle: Tests should be simple - ‚Äúflat test design‚Äù</h3>\n<p>Writing tests should not be done in the same way as writing code. Simplicity should take precedence, even at the cost of code duplication. This means that tests, if possible, should not rely on additional abstractions and should have a flat structure (without nesting).</p>\n<h3 id=\"the-purpose-of-the-test-should-be-understandable---get-test-instantly\" style=\"position:relative;\"><a href=\"#the-purpose-of-the-test-should-be-understandable---get-test-instantly\" aria-label=\"the purpose of the test should be understandable   get test instantly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The purpose of the test should be understandable - ‚Äúget test instantly‚Äù</h3>\n<p>The description of the test should clearly present its intentions. To achieve this, three conditions should be met in the description:</p>\n<ol>\n<li>What is being tested (e.g., the property of an element)</li>\n<li>Under what conditions it is being tested (e.g., the usage of the property)</li>\n<li>What the expected outcome is</li>\n</ol>\n<h3 id=\"test-structure---aaa-principle-arrange-act-assert\" style=\"position:relative;\"><a href=\"#test-structure---aaa-principle-arrange-act-assert\" aria-label=\"test structure   aaa principle arrange act assert permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test structure - AAA principle (Arrange, Act, Assert)</h3>\n<p>-> Arrange = setting up the scenario (variables, mocking, etc.)</p>\n<p>-> Act = performing actions that lead to the final result</p>\n<p>-> Assert = checking the execution of the scenario</p>\n<h3 id=\"test-independence\" style=\"position:relative;\"><a href=\"#test-independence\" aria-label=\"test independence permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test Independence</h3>\n<p>Each test should have its own isolated environment and should not depend on the outcome of a preceding test. This means that tests should not be interdependent or linked in any way, and the data environment should be the same for each test.</p>\n<h3 id=\"realistic-data\" style=\"position:relative;\"><a href=\"#realistic-data\" aria-label=\"realistic data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Realistic Data</h3>\n<p>One element of test readability is the use of realistic data (rather than placeholders like ‚ÄúFoo‚Äù and ‚ÄúBar‚Äù). This allows for a better understanding of the connection to the tested product.</p>\n<h3 id=\"selectors\" style=\"position:relative;\"><a href=\"#selectors\" aria-label=\"selectors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Selectors</h3>\n<p>Selectors that are prone to change should not be used. Instead, it is best to rely on properties that are visible or relevant to the user (e.g., using <code class=\"language-text\">cy.contains()</code>) or assign test attributes like data-cy to the tested object.</p>\n<h3 id=\"waiting\" style=\"position:relative;\"><a href=\"#waiting\" aria-label=\"waiting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Waiting‚Ä¶</h3>\n<p>Instead of arbitrarily waiting for a test task to complete (which will often depend on an HTTP request), it is better to wait for a positive response from that request.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cy<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@request'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">its</span><span class=\"token punctuation\">(</span><span class=\"token string\">'response.statusCode'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'equal'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>Source:</p>\n<p><a href=\"https://www.youtube.com/watch?v=uvJwWQLaVqU&#x26;list=PL8GlT7H3xOcIXrl0nXmyDBYztCKcVqQQg&#x26;index=6&#x26;ab_channel=Cypress.io\">Front-End Test Fest 2021: Recordings - It‚Äôs a (Testing) Trap! - Common Testing Pitfalls and How to Solve Them</a></p>","frontmatter":{"title":"ü§ñ Test automation good practices - basics","date":" 25/06/2021","tags":["test-automation","good-practices"]}}},"pageContext":{"slug":"/e2e/basic-good-practices-test-automation/","previous":null,"next":{"fields":{"slug":"/e2e/cypress-introduction/"},"frontmatter":{"title":"üå≤ Cypress - introduction"}}}}}