{"componentChunkName":"component---src-templates-blog-post-js","path":"/e2e/cypress-intercept/","result":{"data":{"site":{"siteMetadata":{"title":"Kontrolqa","author":"kostyrko","siteUrl":"https://kostyrko.github.io/kontrolqa","comment":{"disqusShortName":"","utterances":"kostyrko/kontrolqa"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"b44d2721-bfa9-5cf7-aba1-d9929b730836","excerpt":"Wprowadzenie stubbing vs mocking Oba pojęcia odnoszą się do podstawiania danych w celu przeprowadzenia testów - mockowanie odnosi się jednak do podstawiania danych w celu testowania funkcjonalności, podczas gdy stubowanie w celu zmiany stanu komponentu/strony/aplikacji. Mocks vs…","html":"<p><img src=\"https://i.ytimg.com/vi/gGDI3ee81d8/maxresdefault.jpg\"></p>\n<h3 id=\"wprowadzenie-stubbing-vs-mocking\" style=\"position:relative;\"><a href=\"#wprowadzenie-stubbing-vs-mocking\" aria-label=\"wprowadzenie stubbing vs mocking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wprowadzenie stubbing vs mocking</h3>\n<p>Oba pojęcia odnoszą się do podstawiania danych w celu przeprowadzenia testów - <strong>mockowanie</strong> odnosi się jednak do podstawiania danych w celu <strong>testowania funkcjonalności</strong>, podczas gdy <strong>stubowanie</strong> w celu <strong>zmiany stanu</strong> komponentu/strony/aplikacji.</p>\n<p><strong>Mocks</strong> vs <strong>Stubs</strong> = Testowanie funkcjonalne vs testowanie stanu => oznacza to że może w teście być wiele stubbów ale tylko jeden mock (w ramach zasady: testowania jednej funkcjonalności na test).</p>\n<p>!!! -> więcej na ten temat patrz: <a href=\"https://stackoverflow.com/questions/3459287/whats-the-difference-between-a-mock-stub\">SO - What’s the difference between a mock &#x26; stub?</a></p>\n<h3 id=\"1-cyintercept\" style=\"position:relative;\"><a href=\"#1-cyintercept\" aria-label=\"1 cyintercept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. cy.intercept()</h3>\n<p><code class=\"language-text\">cy.intercept()</code>- pozwala na przechwycenie zapytania typu HTTP przez test cypressowy - taka komenda może przydać się w przypadku gdy 1) chcemy aby dane zapytanie doszło do skutku zanim zaczniemy wykonywać kolejną komendę lub 2) gdy zależy nam na przechwyceniu requestu HTTP i podstawienia danych do niego, w celu testowania zachowania się aplikacji front-endowej.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">beforeEach(() => {\n    cy.viewport(viewport)\n    cy.intercept('GET', '/xxx/xxx_data?page=1', { fixture: 'xxx/xxx_data.json' })\n})\n    </code></pre></div>\n<hr>\n<h3 id=\"2-cyintercept--cywait\" style=\"position:relative;\"><a href=\"#2-cyintercept--cywait\" aria-label=\"2 cyintercept  cywait permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. cy.intercept() + cy.wait()</h3>\n<p>Nasłuchiwanie zapytania typu GET na <code class=\"language-text\">*/comments/*</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cy.intercept('GET', '**/comments/*').as('getComment')</code></pre></div>\n<p>Sprawdzanie statusu</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304])</code></pre></div>\n<p>Logowanie obiektu (DTO) w konsoli </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cy.get('@post').then(console.log)</code></pre></div>\n<hr>\n<h3 id=\"3-cyintercept--cywait--cycommand\" style=\"position:relative;\"><a href=\"#3-cyintercept--cywait--cycommand\" aria-label=\"3 cyintercept  cywait  cycommand permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. cy.intercept() + cy.wait() + cy.command()</h3>\n<p>Cypress custom command zawierający interceptowane zapytania + wykorzystanie fixture do mockowania stanu + aliasowanie do nich</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Cypress.Commands.add('waitForApp2Start', dto => {\n  cy.intercept('GET', '/xyz', { fixture: 'xdata' }).as('xdata')\n  cy.intercept('GET', '/search_data?*', { fixture: 'searchData' }).as('searchData')\n})</code></pre></div>\n<p>Wywołanie funkcji interceptów/przed faktycznym cy.visit() - inicjacja zmiany stanu aplikacji + w następnym kroku czekanie na wykonanie się zapytań</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cy.waitForApp2Start()\ncy.visit('').wait('@xdata').wait('@searchData')</code></pre></div>\n<hr>\n<h3 id=\"przechwytywanie-wielu-zapytań--mockowanie-wielu-zapytań\" style=\"position:relative;\"><a href=\"#przechwytywanie-wielu-zapyta%C5%84--mockowanie-wielu-zapyta%C5%84\" aria-label=\"przechwytywanie wielu zapytań  mockowanie wielu zapytań permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Przechwytywanie wielu zapytań / mockowanie wielu zapytań</h3>\n<p><code class=\"language-text\">cy.clock()</code>- pozwala na “zamrożenie” zegara oraz wszystkich funkcji związanych z mierzeniem czasu jak setInterval czy setTimeout</p>\n<p><code class=\"language-text\">cy.tick()</code> - pozawala na manualne sterowanie czasem</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">it('fetches from the server (spies)', () => {\n  cy.clock()\n  cy.intercept('GET', '/favorite-fruits').as('fruits')\n  cy.visit('/fruits.html')\n  // pierwsze zapytanie\n  cy.wait('@fruits').its('response.statusCode').should('equal', 200)\n\n  // po 30 sekundach pytanie jest ponawiane \n  cy.tick(30000)\n  cy.wait('@fruits').its('response.statusCode').should('equal', 200)\n  [...]</code></pre></div>\n<p>Mockowanie zapytania HTTP</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  it('returns different fruits every 30 seconds', () => {\n    cy.clock()\n    let k = 0\n\n    // za każdym razem kiedy pojawia się zapytanie inna odpowiedź jest podstawiana\n    cy.intercept('/favorite-fruits', (req) => {\n      k += 1\n      switch (k) {\n        case 1:\n          return req.reply(['apples 🍎'])\n        case 2:\n          return req.reply(['grapes 🍇'])\n        default:\n          return req.reply(['kiwi 🥝'])\n      }\n    })\n\n    cy.visit('/fruits.html')\n    cy.contains('apples 🍎')\n    cy.tick(30000)\n    cy.contains('grapes 🍇')\n    cy.tick(30000)\n     cy.contains('kiwi 🥝')\n})</code></pre></div>\n<p>Za każdym razem kiedy intercept jest wywoływany używa pierwszego elementu z tablicy odpowiedzi i usuwa go.\nPo pierwszych dwóch razach, responses.shift() zawsze zwraca <strong>undefined</strong> i wtedy odpowiedź jest w postaci tablicy zawierającej kiwi.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">it('returns different fruits every 30 seconds (array shift)', () => {\n  cy.clock()\n\n  // return difference responses on each call\n  const responses = [\n    ['apples 🍎'], ['grapes 🍇'],\n  ]\n\n  cy.intercept('/favorite-fruits', (req) => {\n    req.reply(responses.shift() || ['kiwi 🥝'])\n  })\n\n  cy.visit('/fruits.html')\n  cy.contains('apples 🍎')\n  cy.tick(30000)\n  cy.contains('grapes 🍇')\n  cy.tick(30000)\n  cy.contains('kiwi 🥝')\n})</code></pre></div>\n<hr>\n<h3 id=\"testowanie-api-przy-pomocy-cypressa\" style=\"position:relative;\"><a href=\"#testowanie-api-przy-pomocy-cypressa\" aria-label=\"testowanie api przy pomocy cypressa permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testowanie API przy pomocy Cypressa</h3>\n<p>Generalnie Cypress nie powstał w celu testowania API - do tego zostały stworzone inne biblioteki oraz narzędzia (patrz linki w sekcji: Powiązane artykuły) nie oznacza to jednak, że nie może być z powodzeniem do tego wykorzystywany. Powstała nawet do tego osobna wtyczka <a href=\"https://github.com/bahmutov/cy-api\">cy-api</a>.</p>\n<p>Tutaj znajdziesz linki do materiałów na YT(ang), które przedstawiają w jaki sposób można testować API w Cypressie (i jest to naturalne rozwinięcie materiału opisanego powyżej)</p>\n<p><a href=\"https://www.youtube.com/watch?v=TocjjF_pARo\">Cypress - API Testing | Part 14</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=OICPSvIWAQg\">Cy-api/Cypress API testing Tricks</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=bcO2E6XFJCY&#x26;list=PLYDwWPRvXB8-8LG2hZv25HO6C3w_vezZb&#x26;index=15\">CYPRESS API TESTING Introduction - CYPRESS REQUEST</a></p>\n<hr>\n<p>Źródła:</p>\n<p><a href=\"https://docs.cypress.io/api/commands/intercept\">intercept - cypress.io</a></p>\n<p><a href=\"https://example.cypress.io/commands/waiting\">example.cypress.io/commands/waiting</a></p>\n<p><a href=\"https://www.cypress.io/blog/2019/12/23/asserting-network-calls-from-cypress-tests/\">Asserting Network Calls from Cypress Tests</a></p>\n<p><a href=\"https://www.cypress.io/blog/2021/02/23/cy-intercept-and-cy-clock/\">Testing periodic network requests with cy.intercept and cy.clock combination</a></p>\n<p><a href=\"https://glebbahmutov.com/blog/cypress-intercept-problems/\">Cypress cy.intercept Problems/A few common cy.intercept gotchas and how to avoid them - glebbahmutov.com/</a></p>\n<p><a href=\"https://javascript.plainenglish.io/improve-your-end-to-end-tests-with-cypress-intercept-2c68156d9495\">Improve Your End to End Tests with Cypress Intercept</a></p>","frontmatter":{"title":"Cypress: cy.intercept() - przechwytywanie zapytań HTTP","date":" 02/02/2022","tags":null}}},"pageContext":{"slug":"/e2e/cypress-intercept/","previous":{"fields":{"slug":"/e2e/cypress-dom/"},"frontmatter":{"title":"Cypress - przechodzenie pomiędzy elementami drzewa DOM"}},"next":{"fields":{"slug":"/e2e/cypress-test-studio/"},"frontmatter":{"title":"🌲 Cypress - test studio"}}}}}