{"componentChunkName":"component---src-templates-blog-post-js","path":"/e2e/cypress-intercept/","result":{"data":{"site":{"siteMetadata":{"title":"Controlqa 👾","author":"kostyrko","siteUrl":"https://kostyrko.github.io/kontrolqa","comment":{"disqusShortName":"","utterances":"kostyrko/kontrolqa"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"b44d2721-bfa9-5cf7-aba1-d9929b730836","excerpt":"Introduction to Stubbing vs Mocking Both concepts refer to substituting data for testing purposes. However, mocking is specifically used for testing functionality, while stubbing is used for changing the state of a component/page/application. Mocks vs Stubs = Functional Testing…","html":"<p><img src=\"https://i.ytimg.com/vi/gGDI3ee81d8/maxresdefault.jpg\"></p>\n<h3 id=\"introduction-to-stubbing-vs-mocking\" style=\"position:relative;\"><a href=\"#introduction-to-stubbing-vs-mocking\" aria-label=\"introduction to stubbing vs mocking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction to Stubbing vs Mocking</h3>\n<p>Both concepts refer to substituting data for testing purposes. However, <strong>mocking</strong> is specifically used for testing functionality, while <strong>stubbing</strong> is used for changing the state of a component/page/application.</p>\n<p><strong>Mocks</strong> vs <strong>Stubs</strong> = Functional Testing vs State Testing. This means that in a test, there can be multiple stubs but only one mock (as per the principle of testing one functionality per test).</p>\n<p>For more information on this topic, refer to: <a href=\"https://stackoverflow.com/questions/3459287/whats-the-difference-between-a-mock-stub\">SO - What’s the difference between a mock &#x26; stub?</a></p>\n<h3 id=\"1-code-classlanguage-textcyinterceptcode\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textcyinterceptcode\" aria-label=\"1 code classlanguage textcyinterceptcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">cy.intercept()</code></h3>\n<p><code class=\"language-text\">cy.intercept()</code> allows you to intercept an HTTP request in Cypress tests. This command can be useful when you want to ensure that a certain request has completed before executing the next command or when you want to intercept an HTTP request and provide data for testing the behavior of the front-end application.</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        cy<span class=\"token punctuation\">.</span><span class=\"token function\">viewport</span><span class=\"token punctuation\">(</span>viewport<span class=\"token punctuation\">)</span>\n        cy<span class=\"token punctuation\">.</span><span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/xxx/xxx_data?page=1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> fixture<span class=\"token operator\">:</span> <span class=\"token string\">'xxx/xxx_data.json'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h3 id=\"2-code-classlanguage-textcyinterceptcode--code-classlanguage-textcywaitcode\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-textcyinterceptcode--code-classlanguage-textcywaitcode\" aria-label=\"2 code classlanguage textcyinterceptcode  code classlanguage textcywaitcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code class=\"language-text\">cy.intercept()</code> + <code class=\"language-text\">cy.wait()</code></h3>\n<p>Listening for a GET request to <code class=\"language-text\">*/comments/*</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    cy<span class=\"token punctuation\">.</span><span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'**/comments/*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">as</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getComment'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Checking the status</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    cy<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@getComment'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">its</span><span class=\"token punctuation\">(</span><span class=\"token string\">'response.statusCode'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'be.oneOf'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">304</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Logging the object (DTO) to the console</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@post'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h3 id=\"3-code-classlanguage-textcyinterceptcode--code-classlanguage-textcywaitcode--code-classlanguage-textcycommandcode\" style=\"position:relative;\"><a href=\"#3-code-classlanguage-textcyinterceptcode--code-classlanguage-textcywaitcode--code-classlanguage-textcycommandcode\" aria-label=\"3 code classlanguage textcyinterceptcode  code classlanguage textcywaitcode  code classlanguage textcycommandcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. <code class=\"language-text\">cy.intercept()</code> + <code class=\"language-text\">cy.wait()</code> + <code class=\"language-text\">cy.command()</code></h3>\n<p>A Cypress custom command containing intercepted requests + using fixtures to mock state + aliasing them.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    Cypress<span class=\"token punctuation\">.</span>Commands<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'waitForApp2Start'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">dto</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/xyz'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> fixture<span class=\"token operator\">:</span> <span class=\"token string\">'xdata'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">as</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xdata'</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/search_data?*'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> fixture<span class=\"token operator\">:</span> <span class=\"token string\">'searchData'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">as</span><span class=\"token punctuation\">(</span><span class=\"token string\">'searchData'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Calling the intercepts before the actual <code class=\"language-text\">cy.visit()</code> - initiating the application state change + waiting for the requests to be completed in the next step.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    cy<span class=\"token punctuation\">.</span><span class=\"token function\">waitForApp2Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@xdata'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@searchData'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h3 id=\"przechwytywanie-wielu-zapytań--mockowanie-wielu-zapytań\" style=\"position:relative;\"><a href=\"#przechwytywanie-wielu-zapyta%C5%84--mockowanie-wielu-zapyta%C5%84\" aria-label=\"przechwytywanie wielu zapytań  mockowanie wielu zapytań permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Przechwytywanie wielu zapytań / mockowanie wielu zapytań</h3>\n<p><code class=\"language-text\">cy.clock()</code> - allows for “freezing” the clock and all time-related functions such as <code class=\"language-text\">setInterval</code> or <code class=\"language-text\">setTimeout</code>.</p>\n<p><code class=\"language-text\">cy.tick()</code> - allows for manual control of time.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetches from the server (spies)'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/favorite-fruits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">as</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fruits'</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/fruits.html'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// first request</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@fruits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">its</span><span class=\"token punctuation\">(</span><span class=\"token string\">'response.statusCode'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'equal'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// after 30 seconds, the request is made again</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">30000</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@fruits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">its</span><span class=\"token punctuation\">(</span><span class=\"token string\">'response.statusCode'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'equal'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Mocking HTTP Request</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns different fruits every 30 seconds'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n      <span class=\"token comment\">// each time the request is made, a different response is returned</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/favorite-fruits'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        k <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">reply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'apples 🍎'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">reply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'grapes 🍇'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">reply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'kiwi 🥝'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/fruits.html'</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apples 🍎'</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">30000</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'grapes 🍇'</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">30000</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'kiwi 🥝'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Every time the intercept is called, it uses the first element from the response array and removes it.\nAfter the first two times, <code class=\"language-text\">responses.shift()</code> always returns <code class=\"language-text\">undefined</code>, and then the response is in the form of an array containing kiwi.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns different fruits every 30 seconds (array shift)'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// return different responses on each call</span>\n      <span class=\"token keyword\">const</span> responses <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'apples 🍎'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'grapes 🍇'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span>\n\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/favorite-fruits'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        req<span class=\"token punctuation\">.</span><span class=\"token function\">reply</span><span class=\"token punctuation\">(</span>responses<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'kiwi 🥝'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/fruits.html'</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apples 🍎'</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">30000</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'grapes 🍇'</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">30000</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'kiwi 🥝'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"partial-modification\" style=\"position:relative;\"><a href=\"#partial-modification\" aria-label=\"partial modification permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Partial modification</h3>\n<p>Cypress also allows you to modify only a portion of the response object returned by the API. In the example below, the value of the <code class=\"language-text\">listBankAccount</code> property in the <code class=\"language-text\">body.data</code> object is replaced with an empty array.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cy<span class=\"token punctuation\">.</span><span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/bankaccounts\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> body <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">continue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>listBankAccount <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>To achieve this, you need to use the <code class=\"language-text\">.continue()</code> method on the response object passed to the intercept callback. This method allows you to modify the outbound request. Please note that when using <code class=\"language-text\">.continue()</code> without providing any arguments, it allows you to modify the outgoing requests.</p>\n<p>You can find more information about this in the Cypress documentation under <a href=\"https://docs.cypress.io/api/commands/intercept#Controlling-the-outbound-request-with-req-continue\">Controlling the outbound request with req.continue()</a>.\n(Note: This method, without providing arguments, allows for modifying outgoing requests.)</p>\n<hr>\n<h3 id=\"cypress-and-api-testing\" style=\"position:relative;\"><a href=\"#cypress-and-api-testing\" aria-label=\"cypress and api testing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cypress and API testing</h3>\n<p>Cypress is not primarily designed for API testing, as there are other libraries and tools specifically built for that purpose (see the links in the Related Articles section). However, Cypress can still be used successfully for API testing. There are dedicated plugins for API testing: <a href=\"https://github.com/bahmutov/cy-api\">cy-api</a> and <a href=\"https://github.com/filiphric/cypress-plugin-api\">cypress-plugin-api</a> - both are efficient to work with but the latter one has more options and has better UX.</p>\n<p>Here are some links to YouTube videos that demonstrate how to test APIs using Cypress (these videos provide a natural extension to the material described above):</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=TocjjF_pARo\">Cypress - API Testing | Part 14</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=OICPSvIWAQg\">Cy-api/Cypress API testing Tricks</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=bcO2E6XFJCY&#x26;list=PLYDwWPRvXB8-8LG2hZv25HO6C3w_vezZb&#x26;index=15\">CYPRESS API TESTING Introduction - CYPRESS REQUEST</a></li>\n</ul>\n<p>These resources should provide you with valuable insights into testing APIs with Cypress.</p>\n<hr>\n<p>Sources:</p>\n<p><a href=\"https://docs.cypress.io/api/commands/intercept\">intercept - cypress.io</a></p>\n<p><a href=\"https://example.cypress.io/commands/waiting\">example.cypress.io/commands/waiting</a></p>\n<p><a href=\"https://www.cypress.io/blog/2019/12/23/asserting-network-calls-from-cypress-tests/\">Asserting Network Calls from Cypress Tests</a></p>\n<p><a href=\"https://www.cypress.io/blog/2021/02/23/cy-intercept-and-cy-clock/\">Testing periodic network requests with cy.intercept and cy.clock combination</a></p>\n<p><a href=\"https://glebbahmutov.com/blog/cypress-intercept-problems/\">Cypress cy.intercept Problems/A few common cy.intercept gotchas and how to avoid them - glebbahmutov.com/</a></p>\n<p><a href=\"https://javascript.plainenglish.io/improve-your-end-to-end-tests-with-cypress-intercept-2c68156d9495\">Improve Your End to End Tests with Cypress Intercept</a></p>","frontmatter":{"title":"🌲 Cypress: cy.intercept() - catching HTTP requests 🕸️","date":" 02/02/2022","tags":null}}},"pageContext":{"slug":"/e2e/cypress-intercept/","previous":{"fields":{"slug":"/e2e/cypress-dom/"},"frontmatter":{"title":"🌲 Cypress - traversing the DOM tree 🌳"}},"next":{"fields":{"slug":"/e2e/cypress-test-studio/"},"frontmatter":{"title":"🌲 Cypress - test studio"}}}}}