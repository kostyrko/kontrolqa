{"componentChunkName":"component---src-templates-blog-post-js","path":"/e2e/playwright-static-code-analysis/","result":{"data":{"site":{"siteMetadata":{"title":"Controlqa üëæ","author":"kostyrko","siteUrl":"https://kostyrko.github.io/kontrolqa","comment":{"disqusShortName":"","utterances":"kostyrko/kontrolqa"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"59b0a44d-a04f-5523-a874-d55d164af7fc","excerpt":"While working with Playwright test automation framework I found myself randomly committing to the remote repo focused tests marked with  method. In the past i.e. while using Cypress I was aided a plugin which does a static code analysis catching  method and stops you from‚Ä¶","html":"<p>While working with <a href=\"https://playwright.dev/\">Playwright</a> test automation framework I found myself randomly committing to the remote repo focused tests marked with <code class=\"language-text\">only</code> method. In the past i.e. while using <a href=\"https://docs.cypress.io/\">Cypress</a> I was aided a plugin which does a static code analysis catching <code class=\"language-text\">only</code> method and stops you from committing focused tests > check out this plugin here: <a href=\"https://www.npmjs.com/package/stop-only\">stop-only</a></p>\n<blockquote>\n<p>‚ÄúDetects ‚Äò.only‚Äô left in the code accidentally. Works with ‚Äúdescribe‚Äù, ‚Äúcontext‚Äù and ‚Äúit‚Äù.</p>\n</blockquote>\n<p>Although this plugin could be applied to other test automation frameworks as well, this time I was looking for a tool which would broaden the context of static test analysis and one which would have a possibility to expand with my test suite. </p>\n<p>Options which I found suitable where </p>\n<p>1/ using a dedicated plugin: <a href=\"https://github.com/playwright-community/eslint-plugin-playwright\">eslint-plugin-playwright</a> (check the list of <a href=\"https://github.com/playwright-community/eslint-plugin-playwright#list-of-supported-rules\">Supported Rules</a> - btw. Cypress also has a similar plugin <a href=\"https://github.com/cypress-io/eslint-plugin-cypress#rules\">eslint-plugin-cypress#rules</a> which strangely doesn‚Äôt catch focused tests and its rule list is somewhat short) </p>\n<p>2/ or configuring a bare eslint for the project myself</p>\n<p>I went with the latter for the maintenance reasons: </p>\n<p>1/ I didn‚Äôt feel the need of adding a plugin which rules I didn‚Äôt need to follow at this stage </p>\n<p>2/ I figured out it would be easier to maintain rather than relay on a third party  </p>\n<p>the recipe to implement it is as follows: </p>\n<h2 id=\"eslint\" style=\"position:relative;\"><a href=\"#eslint\" aria-label=\"eslint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Eslint</h2>\n<ol>\n<li>Add four eslint related plugins during setup process (all will come in handy)</li>\n</ol>\n<p><code class=\"language-text\">@typescript-eslint/eslint-plugin</code> / <code class=\"language-text\">@typescript-eslint/parser</code> / <code class=\"language-text\">eslint</code></p>\n<p>and <code class=\"language-text\">eslint-plugin-ban</code></p>\n<p>as well as additional script to run <code class=\"language-text\">eslint</code> <code class=\"language-text\">check</code> and automatic <code class=\"language-text\">fix</code> locally to your <code class=\"language-text\">package.json</code> file</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"eslint:check\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npx eslint .\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"eslint:fix\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npx eslint . --fix\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n\n <span class=\"token string\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n    <span class=\"token string\">\"@typescript-eslint/eslint-plugin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^5.60.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^5.60.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^8.43.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"eslint-plugin-ban\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.6.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^5.1.6\"</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>create <code class=\"language-text\">.eslintrc.cjs</code> file and in the rules section add bans that you would like to apply</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* eslint-env node */</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'eslint:recommended'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plugin:@typescript-eslint/recommended'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    parser<span class=\"token operator\">:</span> <span class=\"token string\">'@typescript-eslint/parser'</span><span class=\"token punctuation\">,</span>\n    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@typescript-eslint'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ban'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    root<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"ban/ban\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"describe\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"only\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"don't focus tests\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"only\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"don't focus tests\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>That‚Äôs it - as easy as described above. </p>\n<p>Now to the second part > Husky application (pre-committ hook tool)</p>\n<h2 id=\"husky\" style=\"position:relative;\"><a href=\"#husky\" aria-label=\"husky permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Husky</h2>\n<p>1/ Install husky\nnpm install husky -D</p>\n<p>2/ run script in the terminal <code class=\"language-text\">npm pkg set scripts.prepare=\"husky install\"</code> that will\nwill add/create a script in <code class=\"language-text\">package.json</code> file</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>\n    <span class=\"token string\">\"prepare\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"husky install\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>in the terminal run <code class=\"language-text\">npm run prepare</code> that will run 2 scripts</p>\n<blockquote>\n<p><project-name>@<project-version> prepare\nhusky install</p>\n</blockquote>\n<p>which result in > husky - Git hooks installed</p>\n<p>3/ now we need to add pre-commit hooks, in the terminal run</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx husky add .husky/pre-commit \"npm run lint\"\nhusky - created .husky/pre-commit</code></pre></div>\n<p>which created a  <code class=\"language-text\">.husky</code> folder in the root dir with pre-commit filewith content</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\nnpm run lint</code></pre></div>\n<p>4/ It is worth following with the next step and change linting check to staged files only\nby running additional command in the terminal</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx husky add .husky/pre-commit \"npx lint-staged\"</code></pre></div>\n<p>Voil√† - now while committing a change lint will run automatically through changed files.</p>\n<h2 id=\"resourcesfurther-reading\" style=\"position:relative;\"><a href=\"#resourcesfurther-reading\" aria-label=\"resourcesfurther reading permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resources/Further Reading</h2>\n<p><a href=\"https://github.com/playwright-community/eslint-plugin-playwright\">github - playwright-community/eslint-plugin-playwright</a></p>\n<p><a href=\"https://timdeschryver.dev/blog/dont-commit-focused-tests#tslint\">Don‚Äôt commit focused tests</a></p>\n<p><a href=\"https://prabinpoudel.com.np/articles/run-eslint-on-git-commit-with-husky-and-lint-staged/\">Run ESLint on git commit with Husky and Lint Staged</a></p>\n<p><a href=\"https://gist.github.com/estorgio/e8bcaa8e87d0fcdcf85fdf598956e34c\">gist - Setting up Prettier and ESLint with pre-commit hook</a></p>\n<p><a href=\"https://www.npmjs.com/package/lint-staged?activeTab=readme\">npm: lint-staged</a></p>\n<p><a href=\"https://github.com/cypress-io/eslint-plugin-cypress\">cypress-io/eslint-plugin-cypress</a></p>","frontmatter":{"title":"üé≠ Playwright: eslint + husky > guarding good practices with static pre-commit checks of static code","date":" 01/08/2023","tags":["playwright","eslint","lint","husky"]}}},"pageContext":{"slug":"/e2e/playwright-static-code-analysis/","previous":{"fields":{"slug":"/QA/team-project-conflicts/"},"frontmatter":{"title":"üß® A short introduction to software quality assurance role in team conflicts ü§∫"}},"next":{"fields":{"slug":"/e2e/cypress-plugins/"},"frontmatter":{"title":"üå≤ Cypress plugins ü¶æ"}}}}}